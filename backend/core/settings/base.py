"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os
from os.path import join
import environ
from . import env, BASE_DIR

from corsheaders.defaults import default_headers,default_methods
from ..scopes import scopes, default_scopes
from api_oauth2.tokens import signed_token_generator

env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False)
)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
CUSTOM_BASE_DIR = Path(__file__).resolve().parent.parent.parent
# Take environment variables from .env file
# environ.Env.read_env(os.path.join(BASE_DIR, '.env'))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'django-insecure-r+&iwxovpt95^hy1&dz=)#q=p-ohkqiw9*uj&c9uwfr^7vhr%c'
SECRET_KEY = (
    os.environ["SECRET_KEY"] if "SECRET_KEY" in os.environ else env("SECRET_KEY")
)

OIDC_RSA_PRIVATE_KEY_FILE = (
    os.environ["OIDC_RSA_PRIVATE_KEY_FILE"]
    if "OIDC_RSA_PRIVATE_KEY_FILE" in os.environ
    else env("OIDC_RSA_PRIVATE_KEY_FILE")
)
OIDC_RSA_PRIVATE_KEY_FILE = (
    join(BASE_DIR, OIDC_RSA_PRIVATE_KEY_FILE)
    if not OIDC_RSA_PRIVATE_KEY_FILE.startswith("/")
    else OIDC_RSA_PRIVATE_KEY_FILE
)
with open(OIDC_RSA_PRIVATE_KEY_FILE) as f:
    OIDC_RSA_PRIVATE_KEY = f.read()

SERVER_KEY_FILE = (
    os.environ["SERVER_KEY_FILE"]
    if "SERVER_KEY_FILE" in os.environ
    else env("SERVER_KEY_FILE")
)
SERVER_KEY_FILE_PATH = (
    join(CUSTOM_BASE_DIR, SERVER_KEY_FILE)
    if not SERVER_KEY_FILE.startswith("/")
    else SERVER_KEY_FILE
)

DBCA_KEY_FILE = (
    os.environ["DBCA_KEY_FILE"]
    if "DBCA_KEY_FILE" in os.environ
    else env("DBCA_KEY_FILE")
)
DBCA_KEY_FILE_PATH = (
    join(CUSTOM_BASE_DIR, DBCA_KEY_FILE)
)

JWT_ISSUER = (
    os.environ["JWT_ISSUER"]
    if "JWT_ISSUER" in os.environ
    else env.str("JWT_ISSUER", "Amoz")
)

# # SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = env.bool('DEBUG',default=False)
DEBUG=True
API_HOST = env("API_HOST")
# ALLOWED_HOSTS = ["*"]
ALLOWED_HOSTS = env.list(
    "DJANGO_ALLOWED_HOSTS",
    default=["*",API_HOST, "api", "localhost", "host.docker.internal", "singular-joey-normally.ngrok-free.app","oh-travel.southeastasia.cloudapp.azure.com"],
)

# ALLOWED_HOSTS =['4.145.112.182','localhost','travel-app.southeastasia.cloudapp.azure.com','*']
#ALLOWED_HOSTS = ["4.145.113.250",'localhost','travel-app.southeastasia.cloudapp.azure.com','4.145.112.182']
CORS_ORIGIN_ALLOW_ALL = True

CORS_ALLOW_ALL_ORIGINS = env.bool("CORS_ALLOW_ALL_ORIGINS", default=True)

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://127.0.0.1:5173",
    "http://localhost:5173",
    "http://localhost:3001",
    "http://127.0.0.1:3001", 
    "http://4.145.112.182:8000",
]

CORS_ALLOW_METHODS = [
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
]

CORS_ALLOW_HEADERS = list(default_headers)
CORS_ALLOW_METHODS = list(default_methods)  # Bao gồm tất cả các phương thức HTTP chuẩn
CORS_ALLOW_ALL_HEADERS = True  # Cho phép tất cả headers
CORS_ALLOW_CREDENTIALS = True  # Cho phép gửi thông tin xác thực

# Application definition

DJANGO_APPS = (
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_extensions",
)

THIRD_PARTY_APPS = (
    "rest_framework",
    "rest_framework_api_key",
    "oauth2_provider",
    "corsheaders",
)
CUSTOM_APPS = ("api_oauth2",)

LOCAL_APPS = (
    "api",
    "api_base",
    "api_user",
    "destinations",
    "attraction",
    "chat_history_saver",
    "social_auth",
    "scrapy_api"
)

INSTALLED_APPS = DJANGO_APPS + CUSTOM_APPS + THIRD_PARTY_APPS + LOCAL_APPS

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    'whitenoise.middleware.WhiteNoiseMiddleware',
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",  # Notice the order
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases


# Database
def db_config(prefix="", test=None):
    if test is None:
        test = {}
    DB_NAME = env("DB_NAME")
    return {
        "ENGINE": "django.db.backends.mysql",
        "NAME": prefix + DB_NAME,
        "USER": (
            os.environ["DB_USER"] if "DB_USER" in os.environ else os.environ("DB_USER")
        ),
        "PASSWORD": (
            os.environ["DB_PASSWORD"]
            if "DB_PASSWORD" in os.environ
            else os.environ("DB_PASSWORD")
        ),
        "HOST": (
            os.environ["DB_HOST"] if "DB_HOST" in os.environ else os.environ("DB_HOST")
        ),
        "PORT": (
            os.environ["DB_PORT"] if "DB_PORT" in os.environ else os.environ("DB_PORT")
        ),
        "TEST": test,
        "OPTIONS": {
            # "charset": "utf8mb4",
        
        },
    }


DATABASES = {
    "default": db_config(),
    "tests": db_config("", {"MIRROR": "default"}),
}

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            join(BASE_DIR, "templates"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# AUTHENTICATION_BACKENDS = (
#     "django.contrib.auth.backends.ModelBackend",
#     "oauth2_provider.backends.OAuth2Backend",
# )

REST_FRAMEWORK = {
    # "DEFAULT_AUTHENTICATION_CLASSES": (
    #     "rest_framework.authentication.BasicAuthentication",
    #     "rest_framework.authentication.SessionAuthentication",
    # )
    "DEFAULT_PERMISSION_CLASSES": ["api_oauth2.permissions.TokenHasActionScope"],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "oauth2_provider.contrib.rest_framework.OAuth2Authentication",
    ],
    "DEFAULT_PAGINATION_CLASS": "api_base.pagination.CustomPagination",
    "PAGE_SIZE": 12,
}


AUTH_USER_MODEL = "api_user.User"
# Xác nhận đăng ký custom Appilcation
OAUTH2_PROVIDER_APPLICATION_MODEL = "api_oauth2.Application"
OAUTH2_PROVIDER_ACCESS_TOKEN_MODEL = "api_oauth2.AccessToken"
OAUTH2_PROVIDER_ID_TOKEN_MODEL = "api_oauth2.IDToken"
OAUTH2_PROVIDER_REFRESH_TOKEN_MODEL = "api_oauth2.RefreshToken"
OAUTH2_PROVIDER_GRANT_MODEL = "api_oauth2.Grant"

AUTHENTICATION_BACKENDS = (
    "api_oauth2.backends.CustomOAuth2Backend",
    "django.contrib.auth.backends.ModelBackend",  # To keep the Browsable API
)

OAUTH2_PROVIDER = {
    "OIDC_ENABLED": True,
    "OIDC_RSA_PRIVATE_KEY": OIDC_RSA_PRIVATE_KEY,
    "SCOPES": scopes,
    "DEFAULT_SCOPES": default_scopes,
    "SCOPES_BACKEND_CLASS": "api_oauth2.settings_scopes.SettingsScopes",
    "OAUTH2_VALIDATOR_CLASS": "api_oauth2.oauth_validators.CustomOAuth2Validator",
    "ACCESS_TOKEN_GENERATOR": signed_token_generator(
        OIDC_RSA_PRIVATE_KEY, issuer=JWT_ISSUER
    ),
    "REFRESH_TOKEN_GENERATOR": "oauthlib.oauth2.rfc6749.tokens.random_token_generator",
    "ACCESS_TOKEN_EXPIRE_SECONDS": 3600,
    "REFRESH_TOKEN_GRACE_PERIOD_SECONDS": 4000,
    # ... any other settings you want
}

# GOOGLE CONFIGURE
GOOGLE_OAUTH2_CLIENT_ID = env.str("DJANGO_GOOGLE_OAUTH2_CLIENT_ID", default="")
GOOGLE_OAUTH2_CLIENT_SECRET = env.str("DJANGO_GOOGLE_OAUTH2_CLIENT_SECRET", default="")
GOOGLE_OAUTH2_PROJECT_ID = env.str("DJANGO_GOOGLE_OAUTH2_PROJECT_ID", default="")
SOCIAL_SECRET = env.str("SOCIAL_SECRET", default="")


# Google
GOOGLE_CLIENT_ID = env.str("GOOGLE_CLIENT_ID", default=None)
EMAIL_DOMAIN = env("EMAIL_DOMAIN")
LIMIT_DOMAIN = env.bool("LIMIT_DOMAIN")

DEFAULT_OAUTH2_SCHEME = "http" if API_HOST in ["localhost", "127.0.0.1"] else "https"
API_PORT='8000'
DEFAULT_OAUTH2_PORT = ":" + API_PORT if API_PORT is not None else ""
OAUTH2_URL = DEFAULT_OAUTH2_SCHEME + "://" + API_HOST + DEFAULT_OAUTH2_PORT


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

# Static files
# STATIC_ROOT = join(BASE_DIR, "static")
# STATIC_URL = "static/"
# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, "dist", "static"),
# ]
# STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


STATIC_URL = 'static/'

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

API_HOST = "localhost"
API_PORT = 8000

ALLOWED_HOSTS = [API_HOST, "api", "localhost", "host.docker.internal" , "singular-joey-normally.ngrok-free.app"]

DEFAULT_CLIENT_SECRET = (
    os.environ["DEFAULT_CLIENT_SECRET"]
    if "DEFAULT_CLIENT_SECRET" in os.environ
    else env("DEFAULT_CLIENT_SECRET")
)
DEFAULT_CLIENT_ID = (
    os.environ["DEFAULT_CLIENT_ID"]
    if "DEFAULT_CLIENT_ID" in os.environ
    else env("DEFAULT_CLIENT_ID")
)

COMMON_CLIENT_SECRET = (
    os.environ["COMMON_CLIENT_SECRET"]
    if "COMMON_CLIENT_SECRET" in os.environ
    else env("COMMON_CLIENT_SECRET")
)
COMMON_CLIENT_ID = (
    os.environ["COMMON_CLIENT_ID"]
    if "COMMON_CLIENT_ID" in os.environ
    else env("COMMON_CLIENT_ID")
)

SUPER_ADMIN_EMAIL = (
    os.environ["SUPER_ADMIN_EMAIL"]
    if "SUPER_ADMIN_EMAIL" in os.environ
    else env.str("SUPER_ADMIN_EMAIL", default="service@pandosima.com")
)
SUPER_ADMIN_PASSWORD = (
    os.environ["SUPER_ADMIN_PASSWORD"]
    if "SUPER_ADMIN_PASSWORD" in os.environ
    else env.str("SUPER_ADMIN_PASSWORD", default="")
)

# Email service
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = env("EMAIL_HOST", default="smtp.gmail.com")
EMAIL_PORT = env("EMAIL_PORT", default=587)
EMAIL_HOST_USER = env("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = env("EMAIL_HOST_PASSWORD")
DEFAULT_FROM_EMAIL = env.str("DEFAULT_FROM_EMAIL", default="BVH <noreply@pbl7.com>")


LOGIN_URL = "/admin/login/"
